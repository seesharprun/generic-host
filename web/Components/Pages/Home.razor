@page "/"
@inject IDataRepositoryService dataRepositoryService

<PageTitle>Home</PageTitle>

<main>
    <div class="p-5 mx-auto bg-white flex justify-center items-center gap-x-2">
        <button type="button" class="rounded-lg bg-slate-950 text-white p-2 shadow-lg shadow-slate-950" @onclick="async () => await AddRandomAsync()">Add random order</button>
    </div>
    <div class="p-4 gap-x-2 text-white">
        <div class="grid grid-cols-6 gap-4">
            <div class="font-bold">ID</div>
            <div class="font-bold">Customer Name</div>
            <div class="font-bold">Submitted</div>
            <div class="font-bold">Fulfilled</div>
            <div class="font-bold">Total</div>
            <div class="font-bold"></div>
            @foreach (var item in @items)
            {
                <div class="font-mono text-sm">@item.id</div>
                <div>@item.customerName</div>
                <div>@($"{item.submitted:r}")</div>
                <div>@item.fulfilled</div>
                <div>@($"{item.total:C}")</div>
                <div>
                    <button type="button" class="px-6 rounded-lg bg-red-600 text-white p-2 shadow-lg shadow-amber-950" @onclick="async () => await DeleteOrderAsync(item)">Delete</button>
                </div>
            }
        </div>
    </div>
</main>

@code {
    private Random random = new();

    private List<Order> items = new();

    protected override async Task OnInitializedAsync()
    {
        await GetAllOrdersAsync();
    }

    protected async Task AddRandomAsync()
    {
        Order item = new(
            id: Guid.NewGuid().ToString(),
            customerName: new Faker().Person.FullName,
            submitted: DateTime.Now,
            fulfilled: false,
            total: (decimal)(random.NextDouble() * 1000)
        );

        await dataRepositoryService.AddOrReplaceAsync<Order>(item);

        await GetAllOrdersAsync();
    }
    protected async Task DeleteOrderAsync(Order order)
    {
        await dataRepositoryService.DeleteAsync<Order>(order, o => o.customerName);

        await GetAllOrdersAsync();
    }

    private async Task GetAllOrdersAsync()
    {        
        IEnumerable<Order> orders = await dataRepositoryService.GetAllAsync<Order>();
        items.Clear();
        items.AddRange(orders);
    }
}
